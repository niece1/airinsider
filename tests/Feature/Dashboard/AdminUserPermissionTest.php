<?php

namespace Tests\Feature\Dashboard;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Traits\AdminUser;
use App\Models\Permission;

class AdminUserPermissionTest extends TestCase
{
    use RefreshDatabase;
    use AdminUser;

    public function setUp(): void
    {
        parent::setUp();
        $this->actingAs($this->createAdminUser());
    }

    /** @test */
    public function permissionCanBeAddedToTheTableThroughTheForm()
    {
        $this->post('/dashboard/permissions', [
            'title' => 'user_edit',
        ])
                ->assertSessionHas('success_message')
                ->assertStatus(302)
                ->assertRedirect('/dashboard/permissions');
        //because 32 permissions generated by default via seed
        $this->assertCount(33, Permission::all());
    }

    /** @test */
    public function titleFieldIsRequired()
    {
        $this->post('/dashboard/permissions', [
            'title' => '',
        ])
                ->assertStatus(302)
                ->assertSessionHas('errors');
        $messages = session('errors')->getMessages();
        $this->assertEquals($messages['title'][0], 'The title field is required.');
    }

    /** @test */
    public function titleFieldShouldBeAtLeastTwoCharacters()
    {
        $this->post('/dashboard/permissions', [
            'title' => 'u',
        ])
                ->assertStatus(302)
                ->assertSessionHas('errors');
        $messages = session('errors')->getMessages();
        $this->assertEquals($messages['title'][0], 'The title must be at least 2 characters.');
    }

    /** @test */
    public function titleFieldShouldBeMaxThirtyCharacters()
    {
        $this->post('/dashboard/permissions', [
            'title' => 'user_access_role_add_permission_delete',
        ])
                ->assertStatus(302)
                ->assertSessionHas('errors');
        $messages = session('errors')->getMessages();
        $this->assertEquals($messages['title'][0], 'The title may not be greater than 30 characters.');
    }

    /** @test */
    public function adminUserCanSeeUserPageAndEditUserButton()
    {
        $this->get('/dashboard/users/')
                ->assertStatus(200)
                ->assertSee('User List')
                ->assertSee('Edit');
    }

    /** @test */
    public function adminUserCanSeeCategoryPageAndAddCategoryButton()
    {
        $this->get('/dashboard/categories/')
                ->assertStatus(200)
                ->assertSee('Category List')
                ->assertSee('Add Category');
    }

    /** @test */
    public function adminUserCanSeeTagPageAndAddTagButton()
    {
        $this->get('/dashboard/tags/')
                ->assertStatus(200)
                ->assertSee('Tag List')
                ->assertSee('Add Tag');
    }

    /** @test */
    public function adminUserCanSeePermissionPageAndAddPermissionButton()
    {
        $this->get('/dashboard/permissions/')
                ->assertStatus(200)
                ->assertSee('Permission List')
                ->assertSee('Add Permission');
    }

    /** @test */
    public function adminUserCanSeeTrashPage()
    {
        $this->get('/dashboard/trash/')
                ->assertStatus(200)
                ->assertSee('Trashed');
    }

    /** @test */
    public function adminUserCanSeePostPageAddPostButton()
    {
        $this->get('/dashboard/posts/')
                ->assertStatus(200)
                ->assertSee('Post List')
                ->assertSee('Add Post');
    }

    /** @test */
    public function adminUserCanSeeRolePageAndAddRoleButton()
    {
        $this->get('/dashboard/roles/')
                ->assertStatus(200)
                ->assertSee('Role List')
                ->assertSee('Add Role');
    }

    /** @test */
    public function adminUserCanSeeCommentsPage()
    {
        $this->get('/dashboard/comments/')
                ->assertStatus(200)
                ->assertSee('Comments List');
    }

    /** @test */
    public function adminUserCanSeeSubscriptionPage()
    {
        $this->get('/dashboard/subscriptions/')
                ->assertStatus(200)
                ->assertSee('Subscription List');
    }
}
