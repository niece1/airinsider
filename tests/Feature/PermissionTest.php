<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Traits\AdminUser;
use Tests\Traits\GuestUser;
use App\Permission;

class PermissionTest extends TestCase
{
    use RefreshDatabase, AdminUser, GuestUser;
    
    /** @test */
    public function permission_can_be_added_to_the_table_through_the_form()
    {
        $this->actingAs($this->createAdminUser());
        $response = $this->post('/dashboard/permissions', [
            'title' => 'user_edit',
        ])->assertSessionHas('success_message')->assertStatus(302);
        $response->assertRedirect('/dashboard/permissions');
        //because 32 permissions generated by default via seed
        $this->assertCount(33, Permission::all());
    }
    
    /** @test */
    public function title_field_is_required() 
    {
        $this->actingAs($this->createAdminUser());
        $this->post('/dashboard/permissions', [
            'title' => '',
        ])
                ->assertStatus(302)
                ->assertSessionHas('errors');
        $messages = session('errors')->getMessages();
        $this->assertEquals($messages['title'][0], 'Данное поле обязательно.');
    }
    
    /** @test */
    public function title_field_should_be_at_least_two_characters() 
    {
        $this->actingAs($this->createAdminUser());
        $this->post('/dashboard/permissions', [
            'title' => 'u',
        ])
                ->assertStatus(302)
                ->assertSessionHas('errors');
        $messages = session('errors')->getMessages();
        $this->assertEquals($messages['title'][0], 'Поле должно быть мин 2 символа(ов).');
    }
    
    /** @test */
    public function title_field_should_be_max_thirty_characters() 
    {
        $this->actingAs($this->createAdminUser());
        $this->post('/dashboard/permissions', [
            'title' => 'user_access_role_add_permission_delete',
        ])
                ->assertStatus(302)
                ->assertSessionHas('errors');
        $messages = session('errors')->getMessages();
        $this->assertEquals($messages['title'][0], 'Поле не должно быть больше 30 символа(ов).');
    }
    
    /** @test */
    public function admin_user_can_see_user_page_and_edit_user_button()
    {
        $response = $this->actingAs($this->createAdminUser())
                ->get('/dashboard/users/');
        $response->assertStatus(200);
        $response->assertSee('User List');
        $response->assertSee('Edit');
    }
    
    /** @test */
    public function admin_user_can_see_category_page_and_add_category_button()
    {
        $response = $this->actingAs($this->createAdminUser())
                ->get('/dashboard/categories/');
        $response->assertStatus(200);
        $response->assertSee('Category List');
        $response->assertSee('Add Category');
    }
    
    /** @test */
    public function admin_user_can_see_tag_page_and_add_tag_button()
    {
        $response = $this->actingAs($this->createAdminUser())
                ->get('/dashboard/tags/');
        $response->assertStatus(200);
        $response->assertSee('Tag List');
        $response->assertSee('Add Tag');
    }
    
    /** @test */
    public function admin_user_can_see_permission_page_and_add_permission_button()
    {
        $response = $this->actingAs($this->createAdminUser())
                ->get('/dashboard/permissions/');
        $response->assertStatus(200);
        $response->assertSee('Permission List');
        $response->assertSee('Add Permission');
    }
    
    /** @test */
    public function admin_user_can_see_trash_page()
    {
        $response = $this->actingAs($this->createAdminUser())
                ->get('/dashboard/trashed/');
        $response->assertStatus(200);
        $response->assertSee('Trashed');
    }
 
    /** @test */
    public function admin_user_can_see_post_page_add_post_button() 
    {
        $user = $this->createAdminUser();
        $response = $this->actingAs($user)->get('/dashboard/posts/');
        $response->assertStatus(200);
        $response->assertSee('Post List');
        $response->assertSee('Add Post');
    }
    
    /** @test */
    public function admin_user_can_see_role_page_and_add_role_button() 
    {
        $user = $this->createAdminUser();
        $response = $this->actingAs($user)->get('/dashboard/roles/');
        $response->assertStatus(200);
        $response->assertSee('Role List');
        $response->assertSee('Add Role');
    }
    
    /** @test */
    public function admin_user_can_see_comments_page() 
    {
        $user = $this->createAdminUser();
        $response = $this->actingAs($user)->get('/dashboard/comments/');
        $response->assertStatus(200);
        $response->assertSee('Comments List');
    }
    
    /** @test */
    public function admin_user_can_see_subscription_page() 
    {
        $user = $this->createAdminUser();
        $response = $this->actingAs($user)->get('/dashboard/subscriptions/');
        $response->assertStatus(200);
        $response->assertSee('Subscription List');
    }
    
    /** @test */
    public function guest_user_can_see_post_page() 
    {
        $user = $this->createGuestUser();
        $response = $this->actingAs($user)->get('/dashboard/posts/');
        $response->assertStatus(200);
        $response->assertSee('Post List');
    }
    
    /** @test */
    public function guest_user_cannot_see_add_post_button() 
    {
        $user = $this->createGuestUser();
        $response = $this->actingAs($user)->get('/dashboard/posts/');
        $response->assertStatus(200);
        $response->assertDontSee('Add Post');
    }
    
    /** @test */
    public function guest_user_cannot_see_role_page() 
    {
        $user = $this->createGuestUser();
        $response = $this->actingAs($user)->get('/dashboard/roles/');
        $response->assertForbidden();
    }
}
